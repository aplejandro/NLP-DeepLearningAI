{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Another explanation about PCA\n",
    "\n",
    "\n",
    "<img src = 'pca.jpeg' width=\"width\" height=\"height\"/>\n",
    "<sub>photo credit: Raunak Joshi</sub>\n",
    "\n",
    "\n",
    "In this lab, we are going to view another explanation about Principal Component Analysis(PCA). PCA is a statistical technique invented in 1901 by Karl Pearson that uses orthogonal transformations to map a set of variables into a set of linearly uncorrelated variables called Principal Components. \n",
    "\n",
    "PCA is based on the Singular Value Decomposition(SVD) of the Covariance Matrix of the original dataset. The Eigenvectors of such decomposition are used as a rotation matrix.  The Eigenvectors are arranged in the rotation matrix in decreasing order according to its explained variance. This last term is related to the EigenValues of the SVD.\n",
    "\n",
    "PCA is a potent technique with applications ranging from simple space transformation, dimensionality reduction, and mixture separation from spectral information.\n",
    "\n",
    "Follow this lab to view another explanation for PCA. In this case, we are going to use the concept of rotation matrices applied to correlated random data, just as illustrated in the next picture.\n",
    "\n",
    "<img src=GaussianScatterPCA.svg>\n",
    "\n",
    "Source: https://en.wikipedia.org/wiki/Principal_component_analysis\n",
    "\n",
    "As usual, we must import the libraries that will use in this lab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np                         # Linear algebra library\n",
    "import matplotlib.pyplot as plt            # library for visualization\n",
    "from sklearn.decomposition import PCA      # PCA library\n",
    "import pandas as pd                        # Data frame library\n",
    "import math                                # Library for math functions\n",
    "import random                              # Library for pseudo random numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To start, let us consider a pair of random variables x, y. Consider the base case when y = n * x. The x and y variables will be perfectly correlated to each other since y is just a scaling of x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 1  # The amount of the correlation\n",
    "x = np.random.uniform(1,2,1000) # Generate 1000 samples from a uniform random variable\n",
    "y = x.copy() * n # Make y = n * x\n",
    "\n",
    "# PCA works better if the data is centered\n",
    "x = x - np.mean(x) # Center x. Remove its mean\n",
    "y = y - np.mean(y) # Center y. Remove its mean\n",
    "\n",
    "data = pd.DataFrame({'x': x, 'y': y}) # Create a data frame with x and y\n",
    "plt.scatter(data.x, data.y) # Plot the original correlated data in blue\n",
    "\n",
    "pca = PCA(n_components=2) # Instantiate a PCA. Choose to get 2 output variables\n",
    "\n",
    "# Create the transformation model for this data. Internally, it gets the rotation \n",
    "# matrix and the explained variance\n",
    "pcaTr = pca.fit(data)\n",
    "\n",
    "rotatedData = pcaTr.transform(data) # Transform the data base on the rotation matrix of pcaTr\n",
    "# # Create a data frame with the new variables. We call these new variables PC1 and PC2\n",
    "dataPCA = pd.DataFrame(data = rotatedData, columns = ['PC1', 'PC2']) \n",
    "\n",
    "# Plot the transformed data in orange\n",
    "plt.scatter(dataPCA.PC1, dataPCA.PC2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, what is the direction in which the variables point?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Understanding the transformation model pcaTr\n",
    "\n",
    "As mentioned before, a PCA model is composed of a rotation matrix and its corresponding explained variance. In the next module, we will explain the details of the rotation matrices. \n",
    "\n",
    "* `pcaTr.components_` has the rotation matrix \n",
    "* `pcaTr.explained_variance_` has the explained variance of each principal component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvectors or principal component: First row must be in the direction of [1, n]\n",
      "[[-0.70710678 -0.70710678]\n",
      " [ 0.70710678 -0.70710678]]\n",
      "\n",
      "Eigenvalues or explained variance\n",
      "[1.71889221e-01 5.38383393e-33]\n"
     ]
    }
   ],
   "source": [
    "print('Eigenvectors or principal component: First row must be in the direction of [1, n]')\n",
    "print(pcaTr.components_)\n",
    "\n",
    "print()\n",
    "print('Eigenvalues or explained variance')\n",
    "print(pcaTr.explained_variance_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$cos(45^o) = 0.7071$\n",
    "\n",
    "The rotation matrix is equal to:\n",
    "\n",
    "$$R = \\begin{bmatrix} cos(45^o) & sin(45^o) \\\\ -sin(45^o) & cos(45^o) \\end{bmatrix}$$ \n",
    "\n",
    "And $45^o$ is the same angle that form the variables y = 1 * x.\n",
    "\n",
    "Then, PCA has identified the angle in which point the original variables.\n",
    "\n",
    "And the explained Variance is around [0.166 0]. Remember that the Variance of a uniform random variable x ~ U(1, 2), as our x and y, is equal to:\n",
    "\n",
    "$$Var(x) = \\frac {(2 - 1)^2}{12} = 0.083333$$\n",
    "    \n",
    "Then the explained variance given by the PCA can be interpret as\n",
    "\n",
    "$$[Var(x) + Var(y)  \\ 0] = [0.0833 + 0.0833 \\  0] = [0.166 \\ 0]$$\n",
    "\n",
    "Which means that all the explained variance of our new system is explained by our first principal component. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlated Normal Random Variables.\n",
    "\n",
    "Now, we will use a controlled dataset composed of 2 random variables with different variances and with a specific Covariance among them. The only way I know to get such a dataset is, first, create two independent Normal random variables with the desired variances and then combine them using a rotation matrix. In this way, the new resulting variables will be a linear combination of the original random variables and thus be dependent and correlated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "angle:  45.0\n",
      "rotationMatrix\n",
      "[[ 0.70710678  0.70710678]\n",
      " [-0.70710678  0.70710678]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.lines as mlines\n",
    "import matplotlib.transforms as mtransforms\n",
    "\n",
    "random.seed(100)\n",
    "\n",
    "std1 = 1     # The desired standard deviation of our first random variable\n",
    "std2 = 0.333 # The desired standard deviation of our second random variable\n",
    "\n",
    "x = np.random.normal(0, std1, 1000) # Get 1000 samples from x ~ N(0, std1)\n",
    "y = np.random.normal(0, std2, 1000)  # Get 1000 samples from y ~ N(0, std2)\n",
    "#y = y + np.random.normal(0,1,1000)*noiseLevel * np.sin(0.78)\n",
    "\n",
    "# PCA works better if the data is centered\n",
    "x = x - np.mean(x) # Center x \n",
    "y = y - np.mean(y) # Center y\n",
    "\n",
    "#Define a pair of dependent variables with a desired amount of covariance\n",
    "n = 1 # Magnitude of covariance. \n",
    "angle = np.arctan(1 / n) # Convert the covariance to and angle\n",
    "print('angle: ',  angle * 180 / math.pi)\n",
    "\n",
    "# Create a rotation matrix using the given angle\n",
    "rotationMatrix = np.array([[np.cos(angle), np.sin(angle)],\n",
    "                 [-np.sin(angle), np.cos(angle)]])\n",
    "\n",
    "\n",
    "print('rotationMatrix')\n",
    "print(rotationMatrix)\n",
    "\n",
    "xy = np.concatenate(([x] , [y]), axis=0).T # Create a matrix with columns x and y\n",
    "\n",
    "# Transform the data using the rotation matrix. It correlates the two variables\n",
    "data = np.dot(xy, rotationMatrix) # Return a nD array\n",
    "\n",
    "# Print the rotated data\n",
    "plt.scatter(data[:,0], data[:,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us print the original and the resulting transformed system using the result of the PCA in the same plot alongside with the 2 Principal Component vectors in red and blue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvectors or principal component: First row must be in the direction of [1, n]\n",
      "[[ 0.7102417  0.7039579]\n",
      " [ 0.7039579 -0.7102417]]\n",
      "\n",
      "Eigenvalues or explained variance\n",
      "[0.95743561 0.11019915]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data[:,0], data[:,1]) # Print the original data in blue\n",
    "\n",
    "# Apply PCA. In theory, the Eigenvector matrix must be the \n",
    "# inverse of the original rotationMatrix. \n",
    "pca = PCA(n_components=2)  # Instantiate a PCA. Choose to get 2 output variables\n",
    "\n",
    "# Create the transformation model for this data. Internally it gets the rotation \n",
    "# matrix and the explained variance\n",
    "pcaTr = pca.fit(data)\n",
    "\n",
    "# Create an array with the transformed data\n",
    "dataPCA = pcaTr.transform(data)\n",
    "\n",
    "print('Eigenvectors or principal component: First row must be in the direction of [1, n]')\n",
    "print(pcaTr.components_)\n",
    "\n",
    "print()\n",
    "print('Eigenvalues or explained variance')\n",
    "print(pcaTr.explained_variance_)\n",
    "\n",
    "# Print the rotated data\n",
    "plt.scatter(dataPCA[:,0], dataPCA[:,1])\n",
    "\n",
    "# Plot the first component axe. Use the explained variance to scale the vector\n",
    "plt.plot([0, rotationMatrix[0][0] * std1 * 3], [0, rotationMatrix[0][1] * std1 * 3], 'k-', color='red')\n",
    "# Plot the second component axe. Use the explained variance to scale the vector\n",
    "plt.plot([0, rotationMatrix[1][0] * std2 * 3], [0, rotationMatrix[1][1] * std2 * 3], 'k-', color='green')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The explanation of this chart is as follows:\n",
    "* The rotation matrix used to create our correlated variables took the original uncorrelated variables `x` and `y` and transformed them into the blue points.\n",
    "* The PCA transformation finds out the rotation matrix used to create our correlated variables (blue points). Using the PCA model to transform our data, puts back the variables as our original uncorrelated variables.\n",
    "* The explained Variance of the PCA is \n",
    "\n",
    "$$[1.0094, 0.1125] $$\n",
    "\n",
    "which is approximately\n",
    "\n",
    "$$[1, 0.333 * 0.333] = [std1^2, std2^2],$$\n",
    "\n",
    "the parameters of our original random variables x and y\n",
    "\n",
    "You can use the previous code to try with other standard deviations and correlations and convince your self of this fact.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PCA as a strategy for dimensionality reduction\n",
    "\n",
    "The principal components contained in the rotation matrix, are decreasingly sorted depending on its explained Variance. It usually means that the first components retain most of the power of the data to explain the patterns that **generalize** the data. Nevertheless, for some applications, we are interested in the patterns that explain much less Variance, for example, in novelty detection. \n",
    "\n",
    "In the next figure, we can see the original data and its corresponding projection over the first and second principal components. In other words, data comprised of a single variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nPoints = len(data)\n",
    "\n",
    "# Plot the original data in blue\n",
    "plt.scatter(data[:,0], data[:,1])\n",
    "\n",
    "#Plot the projection along the first component in orange\n",
    "plt.scatter(data[:,0], np.zeros(nPoints))\n",
    "\n",
    "#Plot the projection along the second component in green\n",
    "plt.scatter(np.zeros(nPoints), data[:,1])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PCA as a strategy to plot complex data\n",
    "\n",
    "The next chart shows a sample diagram displaying a dataset of pictures of cats and dogs. Raw pictures are composed of hundreds or even thousands of features. However, PCA allows us to reduce that many features to only two. In that reduced space of uncorrelated variables, we can easily separate cats and dogs. \n",
    "\n",
    "<img src = 'catdog.png'>\n",
    "\n",
    "You will learn how to generate a chart like this with word vectors in this week's programming assignment."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
